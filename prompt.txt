Drug name,Available Drugs Ampule ,Concentration,Total Solution (mL),Drug needed (ml),Solvent needed (mL)
Adrenaline (Epinephrine),1 mg/ml (1:1000),1:10,100,10,90
Adrenaline (Epinephrine),1 mg/ml (1:1000),1:10,250,25,225
Adrenaline (Epinephrine),1 mg/ml (1:1000),1:10,500,50,450
Noradrenaline (Levophed),4 mg/4 ml (1 mg/ml),4:100,100,4,96
Noradrenaline (Levophed),4 mg/4 ml (1 mg/ml),8:100,100,8,92
Noradrenaline (Levophed),4 mg/4 ml (1 mg/ml),4:250,250,4,246
Noradrenaline (Levophed),4 mg/4 ml (1 mg/ml),4:250,500,8,492
Dopamine,250 mg/10 ml (25 mg/ml) ,1:1,100,4,96
Dopamine,250 mg/10 ml (25 mg/ml) ,1:1,250,10,240
Dopamine,250 mg/10 ml (25 mg/ml) ,1:1,500,20,480
Dopamine,250 mg/10 ml (25 mg/ml) ,2:1,100,8,92
Dopamine,250 mg/10 ml (25 mg/ml) ,2:1,250,20,230
Dopamine,250 mg/10 ml (25 mg/ml) ,2:1,500,40,460
Dobutamine,250 mg/20 ml (12.5 mg/ml),1:1,100,8,92
Dobutamine,250 mg/20 ml (12.5 mg/ml),1:1,250,20,230
Dobutamine,250 mg/20 ml (12.5 mg/ml),1:1,500,40,460
Dobutamine,250 mg/20 ml (12.5 mg/ml),2:1,100,16,84
Dobutamine,250 mg/20 ml (12.5 mg/ml),2:1,250,40,210
Dobutamine,250 mg/20 ml (12.5 mg/ml),2:1,500,80,420
Nitroglycerin (NTG),50 mg/ 10 ml (5 mg/ml) ,1:1,100,20,80
Nitroglycerin (NTG),50 mg/ 10 ml (5 mg/ml) ,1:1,250,50,200
Nitroglycerin (NTG),50 mg/ 10 ml (5 mg/ml) ,1:1,500,100,400
Primacor® (Milrinone lactate),10 mg/10 ml (1 mg/ml),1:5,100,20,80
Primacor® (Milrinone lactate),10 mg/10 ml (1 mg/ml),1:5,50,10,40


Explaination: This is the information that I want you to add to the new section of the website. Each drug has one or more ways to be diluted to solvent. The user will selected the desired "Available Drugs Ampule" (if there are more than one), then selectect the "Total Solution (mL)", then the "Drug needed (ml)" and "Solvent needed (mL)" will be calculated and displayed.

How to do:
1) Create a collapsable section that contains selectors in a row configuration
2) Each row contains button selectors for the user to press the desired configuration
3) The first row is about "Available Drugs Ampule". Display one or more button if there are more than one object to select
4) The second row is about "Total Solution (mL)". Display one or more button if there are more than one object to select
5) The third and last row is is output for "Drug needed (ml)" and "Solvent needed (mL)"
6) The labels should be one the left of each row, if big screen. If small screen, the label should be stacked on top of the selectors
7) Insert this section after "concentration "and "medicine" and before "weight"

This is the current code.
ERROR:
app.js:446 Uncaught TypeError: Cannot read properties of undefined (reading 'map')
    at combineLegacyData (app.js:446:11)
    at bootstrapCatalog (app.js:491:13)
    at app.js:493:3

More over the database can be informative on the preparation info. For example...
[{
  id: "levophed",
  name: "Levophed (Norepinephrine)",
  color: "#751be3",
  pMin: 0.01, pMax: 3,
  conc: ["8:100","4:100","4:250"],
  defaultP: 0.1, defaultConc: "4:100",
  synonyms: ["norepi","norepinephrine","noradrenaline"],
  preparations: [
    { ampule:"4 mg/4 ml (1 mg/ml)", conc:"4:100", total:100, drugMl:4, solventMl:96 },
    ...
  ]
}, ...]

Can be this...
[{
  id: "levophed",
  name: "Levophed (Norepinephrine)",
  color: "#751be3",
  pMin: 0.01, pMax: 3,
  conc: ["8:100","4:100","4:250"],
  defaultP: 0.1,
  defaultConc: "4:100",
  defaultTotal: "100",
  synonyms: ["norepi","norepinephrine","noradrenaline"],
  prepVolumes: [100]
  ampuleName:"4 mg/4 mL", # Exclude the parentheses
  ampuleSize: 4, # in mL
  ampuleConc: 1 # in mg/mL
}, ...]

In fact, the preparation can be calculated with "prepVolumes", selected "conc", selected "ampuleSize" and "ampuleConc",

DO NOT EDIT THE FILES YET. Discuss with me first about how you will do it and I will let you know if it is what I need and what to add more.

/* ------------------ Drug configuration (colors + defaults) ------------------ */
const DRUGS = [
  {
    id: "dopamine",
    name: "Dopamine",
    pMin: 1,
    pMax: 50,
    conc: ["1:1", "2:1"],
    color: "#6cc866",
    defaultP: 1.0,
    defaultConc: "2:1",
  },
  {
    id: "dobutamine",
    name: "Dobutamine",
    pMin: 1,
    pMax: 40,
    conc: ["1:1", "2:1"],
    color: "#f8d761",
    defaultP: 1.0,
    defaultConc: "1:1",
  },
  {
    id: "adrenaline",
    name: "Adrenaline",
    pMin: 0.01,
    pMax: null,
    conc: ["1:10"],
    color: "#feb1dc",
    defaultP: 0.1,
    defaultConc: "1:10",
  },
  {
    id: "levophed",
    name: "Levophed (Norepinephrine)",
    pMin: 0.01,
    pMax: 3,
    conc: ["8:100", "4:100", "4:250"],
    color: "#751be3",
    defaultP: 0.1,
    defaultConc: "4:100",
  },
  {
    id: "primacor",
    name: "Primacor (Milrinone)",
    pMin: 0.01,
    pMax: null,
    conc: ["1:5"],
    color: "#d088f7",
    defaultP: 0.1,
    defaultConc: "1:5",
  },
  {
    id: "ntg",
    name: "NTG (Nitroglycerine)",
    pMin: 1,
    pMax: null,
    conc: ["1:1", "2:1"],
    color: "#e87c1e",
    defaultP: 1.0,
    defaultConc: "1:1",
  },
];
const DRUG_INDEX = Object.fromEntries(DRUGS.map((d) => [d.id, d]));

/* Synonyms for URL parsing */
const SYNS = {
  norepinephrine: "levophed",
  norepi: "levophed",
  noradrenaline: "levophed",
  epinephrine: "adrenaline",
  milrinone: "primacor",
  nitroglycerin: "ntg",
  nitroglycerine: "ntg",
  dopa: "dopamine",
  dobu: "dobutamine",
  adr: "adrenaline",
};

/* --- Dilution preset data (by drug + concentration + total) --- */
const PREP_DATA = [
  // Adrenaline
  {
    drug: "adrenaline",
    ampule: "1 mg/ml (1:1000)",
    conc: "1:10",
    total: 100,
    drugMl: 10,
    solventMl: 90,
  },
  {
    drug: "adrenaline",
    ampule: "1 mg/ml (1:1000)",
    conc: "1:10",
    total: 250,
    drugMl: 25,
    solventMl: 225,
  },
  {
    drug: "adrenaline",
    ampule: "1 mg/ml (1:1000)",
    conc: "1:10",
    total: 500,
    drugMl: 50,
    solventMl: 450,
  },
  // Levophed
  {
    drug: "levophed",
    ampule: "4 mg/4 ml (1 mg/ml)",
    conc: "4:100",
    total: 100,
    drugMl: 4,
    solventMl: 96,
  },
  {
    drug: "levophed",
    ampule: "4 mg/4 ml (1 mg/ml)",
    conc: "8:100",
    total: 100,
    drugMl: 8,
    solventMl: 92,
  },
  {
    drug: "levophed",
    ampule: "4 mg/4 ml (1 mg/ml)",
    conc: "4:250",
    total: 250,
    drugMl: 4,
    solventMl: 246,
  },
  {
    drug: "levophed",
    ampule: "4 mg/4 ml (1 mg/ml)",
    conc: "4:250",
    total: 500,
    drugMl: 8,
    solventMl: 492,
  },
  // Dopamine
  {
    drug: "dopamine",
    ampule: "250 mg/10 ml (25 mg/ml)",
    conc: "1:1",
    total: 100,
    drugMl: 4,
    solventMl: 96,
  },
  {
    drug: "dopamine",
    ampule: "250 mg/10 ml (25 mg/ml)",
    conc: "1:1",
    total: 250,
    drugMl: 10,
    solventMl: 240,
  },
  {
    drug: "dopamine",
    ampule: "250 mg/10 ml (25 mg/ml)",
    conc: "1:1",
    total: 500,
    drugMl: 20,
    solventMl: 480,
  },
  {
    drug: "dopamine",
    ampule: "250 mg/10 ml (25 mg/ml)",
    conc: "2:1",
    total: 100,
    drugMl: 8,
    solventMl: 92,
  },
  {
    drug: "dopamine",
    ampule: "250 mg/10 ml (25 mg/ml)",
    conc: "2:1",
    total: 250,
    drugMl: 20,
    solventMl: 230,
  },
  {
    drug: "dopamine",
    ampule: "250 mg/10 ml (25 mg/ml)",
    conc: "2:1",
    total: 500,
    drugMl: 40,
    solventMl: 460,
  },
  // Dobutamine
  {
    drug: "dobutamine",
    ampule: "250 mg/20 ml (12.5 mg/ml)",
    conc: "1:1",
    total: 100,
    drugMl: 8,
    solventMl: 92,
  },
  {
    drug: "dobutamine",
    ampule: "250 mg/20 ml (12.5 mg/ml)",
    conc: "1:1",
    total: 250,
    drugMl: 20,
    solventMl: 230,
  },
  {
    drug: "dobutamine",
    ampule: "250 mg/20 ml (12.5 mg/ml)",
    conc: "1:1",
    total: 500,
    drugMl: 40,
    solventMl: 460,
  },
  {
    drug: "dobutamine",
    ampule: "250 mg/20 ml (12.5 mg/ml)",
    conc: "2:1",
    total: 100,
    drugMl: 16,
    solventMl: 84,
  },
  {
    drug: "dobutamine",
    ampule: "250 mg/20 ml (12.5 mg/ml)",
    conc: "2:1",
    total: 250,
    drugMl: 40,
    solventMl: 210,
  },
  {
    drug: "dobutamine",
    ampule: "250 mg/20 ml (12.5 mg/ml)",
    conc: "2:1",
    total: 500,
    drugMl: 80,
    solventMl: 420,
  },
  // NTG
  {
    drug: "ntg",
    ampule: "50 mg/10 ml (5 mg/ml)",
    conc: "1:1",
    total: 100,
    drugMl: 20,
    solventMl: 80,
  },
  {
    drug: "ntg",
    ampule: "50 mg/10 ml (5 mg/ml)",
    conc: "1:1",
    total: 250,
    drugMl: 50,
    solventMl: 200,
  },
  {
    drug: "ntg",
    ampule: "50 mg/10 ml (5 mg/ml)",
    conc: "1:1",
    total: 500,
    drugMl: 100,
    solventMl: 400,
  },
  // Primacor
  {
    drug: "primacor",
    ampule: "10 mg/10 ml (1 mg/ml)",
    conc: "1:5",
    total: 100,
    drugMl: 20,
    solventMl: 80,
  },
  {
    drug: "primacor",
    ampule: "10 mg/10 ml (1 mg/ml)",
    conc: "1:5",
    total: 50,
    drugMl: 10,
    solventMl: 40,
  },
];

/* ---------- i18n (English / Thai) ---------- */
let LANG = "en";
const I18N = {
  en: {
    below: "Below min",
    within: "Within range",
    above: "Above max",
    range(min, max, drug) {
      return ` • Range: <b>${min}</b> to <b>${max}</b> mcg/kg/min for ${drug}.`;
    },
    limits(b, conc, pMax, maxRate) {
      return `For weight <b>${b} kg</b> and concentration <b>${conc}</b>, max dose is <b>${pMax} mcg/kg/min</b> → max infusion <b>${maxRate} mL/hr</b>.`;
    },
    noMax(drug) {
      return `No specified maximum dose in table for ${drug}.`;
    },
    modeForward: "mcg/kg/min → mL/hr (Tap to change mode)",
    modeReverse: "mL/hr → mcg/kg/min (Tap to change mode)",
  },
  th: {
    below: "ต่ำกว่าเกณฑ์",
    within: "อยู่ในเกณฑ์",
    above: "สูงกว่าเกณฑ์",
    range(min, max, drug) {
      return ` • ขนาดที่กำหนด: <b>${min}</b> ถึง <b>${max} mcg/kg/min</b> สำหรับ <b>${drug}</b>.`;
    },
    limits(b, conc, pMax, maxRate) {
      return `สำหรับน้ำหนัก <b>${b} kg</b> และความเข้มข้น <b>${conc}</b>, Dose สูงสุดคือ <b>${pMax} mcg/kg/min</b> → Infusion rate สูงสุด <b>${maxRate} mL/hr</b>.`;
    },
    noMax(drug) {
      return `ไม่มีการระบุขนาดยาสูงสุดในตารางสำหรับ ${drug}.`;
    },
    modeForward: "mcg/kg/min → mL/hr (กดเพื่อเปลี่ยนโหมด)",
    modeReverse: "mL/hr → mcg/kg/min (กดเพื่อเปลี่ยนโหมด)",
  },
};
const dict = () => (LANG === "th" ? I18N.th : I18N.en);
const normalizeLang = (s) =>
  ["th", "thai", "th-th"].includes((s || "").toLowerCase()) ? "th" : "en";

/* ------------------ DOM helpers ------------------ */
const $ = (id) => document.getElementById(id);
const drugSel = $("drug"),
  concSel = $("conc"),
  drugChip = $("drugChip");
const modeBtn = $("modeBtn");
const forwardDiv = $("forward"),
  reverseDiv = $("reverse");
const P = $("P"),
  B = $("B"),
  Qf = $("Qf"),
  Rate = $("Rate");
const RateIn = $("RateIn"),
  Qr = $("Qr"),
  Pout = $("Pout");
const resTitle = $("resTitle"),
  resValue = $("resValue"),
  limits = $("limits"),
  rangeNote = $("rangeNote");
const shareLink = $("shareLink"),
  copyBtn = $("copyBtn"),
  qrBtn = $("qrBtn");
const qrContainer = $("qrcode");

/* --- Prep DOM --- */
const ampuleGroup = document.getElementById("ampuleGroup");
const totalGroup = document.getElementById("totalGroup");
const outDrugMl = document.getElementById("outDrugMl");
const outSolventMl = document.getElementById("outSolventMl");

let mode = "forward";
let booting = true;
let prepState = { ampule: null, total: null };

function unique(list) {
  return [...new Set(list)];
}
function clear(el) {
  while (el.firstChild) el.removeChild(el.firstChild);
}

function makeChip(value, isActive, onClick) {
  const b = document.createElement("button");
  b.type = "button";
  b.className = "chipbtn" + (isActive ? " active" : "");
  b.setAttribute("aria-pressed", isActive ? "true" : "false");
  b.textContent = value;
  b.addEventListener("click", onClick);
  return b;
}

function refreshPrepUI() {
  // filter rows for current drug + selected conc
  const dId = drugSel.value;
  const conc = concSel.value;
  const rows = PREP_DATA.filter((r) => r.drug === dId && r.conc === conc);

  // If nothing to show, clear and bail
  clear(ampuleGroup);
  clear(totalGroup);
  outDrugMl.value = "";
  outSolventMl.value = "";
  if (!rows.length) return;

  // Ampule options
  const ampules = unique(rows.map((r) => r.ampule));
  if (!prepState.ampule || !ampules.includes(prepState.ampule)) {
    prepState.ampule = ampules[0];
  }
  ampules.forEach((a) => {
    ampuleGroup.appendChild(
      makeChip(a, a === prepState.ampule, () => {
        prepState.ampule = a;
        // reset total when ampule changes
        prepState.total = null;
        refreshTotalsAndOutput(rows);
      })
    );
  });

  // Totals + output
  refreshTotalsAndOutput(rows);
}

function refreshTotalsAndOutput(rows) {
  // rows already filtered by drug+conc; further filter by ampule
  const subset = rows.filter((r) => r.ampule === prepState.ampule);
  const totals = unique(subset.map((r) => r.total)).sort((a, b) => a - b);

  clear(totalGroup);
  if (!prepState.total || !totals.includes(prepState.total)) {
    prepState.total = totals[0];
  }
  totals.forEach((t) => {
    totalGroup.appendChild(
      makeChip(String(t), t === prepState.total, () => {
        prepState.total = t;
        writePrepOutputs(subset);
        // re-render totals to update active highlight
        refreshTotalsAndOutput(rows);
      })
    );
  });

  writePrepOutputs(subset);
}

function writePrepOutputs(subset) {
  const row = subset.find((r) => r.total === prepState.total);
  if (row) {
    outDrugMl.value = Number(row.drugMl).toString();
    outSolventMl.value = Number(row.solventMl).toString();
  } else {
    outDrugMl.value = "";
    outSolventMl.value = "";
  }
}

// ========== 1) Build unified in-memory catalog from your existing arrays ==========
let CATALOG = null;

function combineLegacyData(drugs, prepRows) {
  // clone drugs and prepare a "preparations" array per drug
  const byId = Object.fromEntries(
    drugs.map((d) => [
      d.id,
      { ...d, synonyms: d.synonyms || [], preparations: [] },
    ])
  );

  for (const r of prepRows) {
    const d = byId[r.drug];
    if (!d) continue; // skip orphan prep rows
    d.preparations.push({
      ampule: r.ampule,
      conc: r.conc,
      total: Number(r.total),
      drugMl: Number(r.drugMl),
      solventMl: Number(r.solventMl),
    });
  }
  return Object.values(byId);
}

// ========== 2) Derive legacy globals so the current UI keeps working ==========
function deriveLegacyGlobalsFromCatalog(catalog) {
  // DRUGS without the nested preparations (shapes the same as your existing DRUGS)
  window.DRUGS = catalog.map(({ preparations, synonyms, ...rest }) => rest);

  // DRUG_INDEX can reference the full object (with preparations) — nice for future use
  window.DRUG_INDEX = Object.fromEntries(catalog.map((d) => [d.id, d]));

  // SYNS (string → drug id)
  window.SYNS = {};
  for (const d of catalog) {
    (d.synonyms || []).forEach((s) => {
      window.SYNS[s.toLowerCase()] = d.id;
    });
  }

  // PREP_DATA flattened so refreshPrepUI() and friends work untouched
  window.PREP_DATA = catalog.flatMap((d) =>
    (d.preparations || []).map((p) => ({ drug: d.id, ...p }))
  );
}

// ========== 3) Call this once before your init logic uses the globals ==========
(function bootstrapCatalog() {
  // Build the unified catalog from your current constants:
  CATALOG = combineLegacyData(window.DRUGS, window.PREP_DATA);
  deriveLegacyGlobalsFromCatalog(CATALOG);
})();

/* ------------------ Utils ------------------ */
const to2 = (x) => (Number.isFinite(+x) ? (+x).toFixed(2) : "");
const to1 = (x) => (Number.isFinite(+x) ? (+x).toFixed(1) : "");
const to3 = (x) => (Number.isFinite(+x) ? (+x).toFixed(3) : "");
const parseNum = (v) => {
  const n = Number(v);
  return Number.isFinite(n) ? n : null;
};

/* ------------------ Core math ------------------ */
const computeQ = (B, A) => (0.06 * B) / A; // mL/hr per (mcg/kg/min)
const computeRate = (P, Q) => P * Q; // mL/hr
const computeP = (rate, Q) => rate / Q; // mcg/kg/min
function pWithinRange(p, d) {
  if (p == null || !isFinite(p)) return null;
  if (d.pMax == null) return p >= d.pMin ? "ok" : "low";
  if (p < d.pMin) return "low";
  if (p > d.pMax) return "high";
  return "ok";
}

/* ------------------ URL parsing ------------------ */
function normalizeSlug(s) {
  if (!s) return null;
  s = s.trim().toLowerCase();
  if (SYNS[s]) s = SYNS[s];
  return s;
}
function parseHashParts() {
  const raw = (location.hash || "").replace(/^#/, "");
  let path = "",
    qs = "";
  if (!raw) return { path: "", qs: "" };
  if (raw.startsWith("/")) {
    const ix = raw.indexOf("?");
    if (ix >= 0) {
      path = raw.slice(1, ix);
      qs = raw.slice(ix + 1);
    } else {
      path = raw.slice(1);
    }
  } else if (raw.startsWith("?")) {
    qs = raw.slice(1);
  } else if (raw.includes("=")) {
    qs = raw;
  } else {
    path = raw;
  }
  return { path, qs };
}
function getParamsFromURL() {
  const url = new URL(location.href);
  let drug = normalizeSlug(
    url.searchParams.get("drug") ||
      url.searchParams.get("med") ||
      url.searchParams.get("medicine")
  );
  let modeRaw =
    url.searchParams.get("mode") ||
    url.searchParams.get("m") ||
    url.searchParams.get("reverse") ||
    url.searchParams.get("rev");
  let concRaw =
    url.searchParams.get("conc") ||
    url.searchParams.get("concentration") ||
    url.searchParams.get("a");
  let pRaw = url.searchParams.get("p") || url.searchParams.get("dose");
  let bRaw =
    url.searchParams.get("b") ||
    url.searchParams.get("wt") ||
    url.searchParams.get("weight");
  let rateRaw =
    url.searchParams.get("rate") ||
    url.searchParams.get("mlhr") ||
    url.searchParams.get("mlh") ||
    url.searchParams.get("r");
  let langRaw =
    url.searchParams.get("lang") ||
    url.searchParams.get("language") ||
    url.searchParams.get("locale");

  // Fallback: hash
  const { path, qs } = parseHashParts();
  const hashParams = new URLSearchParams(qs || "");
  if (!drug)
    drug =
      normalizeSlug(path) ||
      normalizeSlug(
        hashParams.get("drug") ||
          hashParams.get("med") ||
          hashParams.get("medicine")
      );
  if (modeRaw == null)
    modeRaw =
      hashParams.get("mode") ||
      hashParams.get("m") ||
      hashParams.get("reverse") ||
      hashParams.get("rev");
  if (concRaw == null)
    concRaw =
      hashParams.get("conc") ||
      hashParams.get("concentration") ||
      hashParams.get("a");
  if (pRaw == null) pRaw = hashParams.get("p") || hashParams.get("dose");
  if (bRaw == null)
    bRaw =
      hashParams.get("b") || hashParams.get("wt") || hashParams.get("weight");
  if (rateRaw == null)
    rateRaw =
      hashParams.get("rate") ||
      hashParams.get("mlhr") ||
      hashParams.get("mlh") ||
      hashParams.get("r");
  if (langRaw == null)
    langRaw =
      hashParams.get("lang") ||
      hashParams.get("language") ||
      hashParams.get("locale");

  // Fallback: path segment
  if (!drug) {
    const segs = (url.pathname || "").split("/").filter(Boolean);
    if (segs.length) {
      drug = normalizeSlug(segs[segs.length - 1]);
    }
  }

  const modeVal = (() => {
    const s = (modeRaw || "").toString().toLowerCase();
    if (["reverse", "rev", "r"].includes(s)) return "reverse";
    if (["1", "true", "yes", "on"].includes(s)) return "reverse";
    return "forward";
  })();

  const conc = concRaw ? concRaw.replace(/\s+/g, "") : null;
  const p = parseNum(pRaw);
  const b = parseNum(bRaw);
  const rate = parseNum(rateRaw);
  const lang = normalizeLang(langRaw || LANG);
  return { drug, mode: modeVal, conc, p, b, rate, lang };
}

/* ------------------ Build & write query URL ------------------ */
function buildShareParams() {
  const params = new URLSearchParams();
  params.set("drug", drugSel.value);
  params.set("mode", mode);
  params.set("lang", LANG);
  if (concSel.value) params.set("conc", concSel.value);

  if (mode === "forward") {
    if (P.value) params.set("p", to2(P.value));
    if (B.value) params.set("b", to1(B.value));
    if (Rate.value) params.set("rate", to2(Rate.value));
  } else {
    if (RateIn.value) params.set("rate", to2(RateIn.value));
    if (B.value) params.set("b", to1(B.value));
    if (Pout.value) params.set("p", to2(Pout.value));
  }
  return params;
}
function buildURLWithParams() {
  const url = new URL(location.href);
  url.search = buildShareParams().toString();
  url.hash = "";
  return url.toString();
}
let urlTimer = null;
const URL_DEBOUNCE_MS = 250;
function writeURLFromState_query() {
  const newUrl = buildURLWithParams();
  history.replaceState(null, "", newUrl);
}
function scheduleURLUpdate() {
  clearTimeout(urlTimer);
  urlTimer = setTimeout(writeURLFromState_query, URL_DEBOUNCE_MS);
}
function updateShareLink() {
  shareLink.value = buildURLWithParams();
}

/* ------------------ UI & state ------------------ */
function populateDrugOptions() {
  for (const d of DRUGS) {
    const opt = document.createElement("option");
    opt.value = d.id;
    opt.textContent = d.name;
    drugSel.appendChild(opt);
  }
}
function populateConcs() {
  const d = DRUG_INDEX[drugSel.value];
  concSel.innerHTML = "";
  d.conc.forEach((c) => {
    const opt = document.createElement("option");
    opt.value = c;
    opt.textContent = c;
    concSel.appendChild(opt);
  });
}
function updateChip() {
  const d = DRUG_INDEX[drugSel.value];
  drugChip.style.background = d ? d.color : "#444";
  drugChip.title = d ? d.name : "";
}
function parseA() {
  const [x, y] = concSel.value.split(":").map(Number);
  return x / y;
}
function showMode(newMode) {
  mode = newMode;
  forwardDiv.style.display = mode === "forward" ? "" : "none";
  reverseDiv.style.display = mode === "reverse" ? "" : "none";
  modeBtn.classList.toggle("active", mode === "reverse");
  const D = dict();
  modeBtn.textContent = mode === "forward" ? D.modeForward : D.modeReverse;
}
function setIfProvided(inputEl, val, fmt) {
  if (val == null || !isFinite(val)) return;
  inputEl.value = fmt ? fmt(val) : val;
}

/* --------- Apply per-drug defaults (dose + concentration) --------- */
function applyDrugDefaults(force = false) {
  const d = DRUG_INDEX[drugSel.value];
  if (!d) return;

  // concentration default if invalid/missing or forced
  const allowed = Array.from(concSel.options).map((o) => o.value);
  if (force || !concSel.value || !allowed.includes(concSel.value)) {
    if (d.defaultConc && allowed.includes(d.defaultConc)) {
      concSel.value = d.defaultConc;
    }
  }

  // forward-dose default if empty or forced (harmless in reverse)
  if (force || !P.value) {
    if (d.defaultP != null) P.value = to2(d.defaultP);
  }
}

/* ------------------ Recalc ------------------ */
function recalc() {
  const d = DRUG_INDEX[drugSel.value];
  const A = parseA();
  const D = dict();

  const b = Number(B.value);
  const Q = computeQ(b, A);

  if (mode === "forward") {
    const p = Number(P.value);
    Qf.value = isFinite(Q) ? to3(Q) : "";
    const rate = computeRate(p, Q);
    Rate.value = isFinite(rate) ? to2(rate) : "";
    resTitle.textContent = "Infusion rate (mL/hr)";
    resValue.textContent = isFinite(rate) ? `${to2(rate)} mL/hr` : "—";
    if (d.pMax != null && isFinite(Q)) {
      const maxRate = computeRate(d.pMax, Q);
      limits.innerHTML = D.limits(
        isFinite(b) ? to1(b) : "—",
        concSel.value,
        d.pMax.toFixed(2),
        to2(maxRate)
      );
    } else {
      limits.textContent = D.noMax(d.name);
    }
    const status = pWithinRange(p, d);
    rangeNote.innerHTML = rangeLine(d, status);
  } else {
    const rateIn = Number(RateIn.value);
    Qr.value = isFinite(Q) ? to3(Q) : "";
    const p = computeP(rateIn, Q);
    Pout.value = isFinite(p) ? to2(p) : "";
    resTitle.textContent = "Required Dose (mcg/kg/min)";
    resValue.textContent = isFinite(p) ? `${to2(p)} mcg/kg/min` : "—";
    if (d.pMax != null && isFinite(Q)) {
      const maxRate = computeRate(d.pMax, Q);
      limits.innerHTML = D.limits(
        isFinite(b) ? to1(b) : "—",
        concSel.value,
        d.pMax.toFixed(2),
        to2(maxRate)
      );
    } else {
      limits.textContent = D.noMax(d.name);
    }
    const status = pWithinRange(p, d);
    rangeNote.innerHTML = rangeLine(d, status);
  }

  if (!booting) {
    updateShareLink();
    scheduleURLUpdate();
  }
}
function rangeLine(d, status) {
  const D = dict();
  const minTxt = d.pMin != null ? d.pMin.toFixed(2) : "—";
  const maxTxt = d.pMax != null ? d.pMax.toFixed(2) : "no max";
  const cls = status === "high" ? "bad" : status === "low" ? "warn" : "ok";
  const label =
    status === "high" ? D.above : status === "low" ? D.below : D.within;
  return `<span class="${cls}">${label}</span>${D.range(
    minTxt,
    maxTxt,
    d.name
  )}`;
}

/* ------------------ QR generation & download ------------------ */
function downloadQRForCurrentLink() {
  const urlToEncode = buildURLWithParams();
  if (!window.QRCode) {
    alert("QR generator not loaded.");
    return;
  }

  qrContainer.innerHTML = "";
  const qr = new QRCode(qrContainer, {
    text: urlToEncode,
    width: 512,
    height: 512,
    colorDark: "#000000",
    colorLight: "#ffffff",
    correctLevel: QRCode.CorrectLevel.H,
  });

  setTimeout(() => {
    let dataUrl = "";
    const canvas = qrContainer.querySelector("canvas");
    if (canvas && canvas.toDataURL) dataUrl = canvas.toDataURL("image/png");
    else {
      const img = qrContainer.querySelector("img");
      if (img && img.src) dataUrl = img.src;
    }
    if (!dataUrl) {
      alert("Failed to generate QR image.");
      return;
    }

    const fname = `infusion-qr_${drugSel.value}_${mode}.png`;
    const a = document.createElement("a");
    a.href = dataUrl;
    a.download = fname;
    if (typeof a.download === "undefined") window.open(dataUrl, "_blank");
    else {
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
    }
  }, 0);
}

/* ------------------ Events ------------------ */
function attachEvents() {
  [drugSel, concSel, P, RateIn, B].forEach((el) =>
    el.addEventListener("input", recalc)
  );

  modeBtn.addEventListener("click", () => {
    showMode(mode === "forward" ? "reverse" : "forward");
    recalc();
  });

  drugSel.addEventListener("change", () => {
    populateConcs();
    updateChip();
    applyDrugDefaults(true); // switch to this drug’s defaults
    recalc();
    refreshPrepUI();
  });

  concSel.addEventListener("input", () => {
    recalc();
    refreshPrepUI();
  });

  copyBtn.addEventListener("click", async () => {
    try {
      await navigator.clipboard.writeText(shareLink.value);
      copyBtn.textContent = "Copied!";
      setTimeout(() => (copyBtn.textContent = "Copy link"), 1200);
    } catch {
      shareLink.select();
      document.execCommand && document.execCommand("copy");
    }
  });

  qrBtn.addEventListener("click", downloadQRForCurrentLink);

  window.addEventListener("popstate", () => {
    booting = true;
    hydrateFromURL();
    booting = false;
    recalc();
    refreshPrepUI();
  });
  window.addEventListener("hashchange", () => {
    booting = true;
    hydrateFromURL();
    booting = false;
    recalc();
    refreshPrepUI();
  });
}

/* ------------------ Hydration from URL ------------------ */
function hydrateFromURL() {
  const { drug, mode: m, conc, p, b, rate, lang } = getParamsFromURL();

  // Language (also set <html lang> for Thai font)
  LANG = normalizeLang(lang);
  document.documentElement.setAttribute("lang", LANG);

  // Drug
  const dId = drug && DRUG_INDEX[drug] ? drug : DRUGS[0].id;
  drugSel.value = dId;
  populateConcs();
  updateChip();

  // Mode
  showMode(m);

  // Apply defaults (only if missing); then override with URL if present/valid
  applyDrugDefaults(false);

  if (conc && Array.from(concSel.options).some((o) => o.value === conc)) {
    concSel.value = conc;
  }

  // Values
  setIfProvided(B, b, to1); // single weight field used in both modes
  if (mode === "forward") {
    setIfProvided(P, p, to2);
    if (rate != null && isFinite(rate)) Rate.value = to2(rate);
  } else {
    setIfProvided(RateIn, rate, to2);
    if (p != null && isFinite(p)) Pout.value = to2(p);
  }
}

/* ------------------ Init ------------------ */
function init() {
  populateDrugOptions();
  attachEvents();
  hydrateFromURL();
  booting = false;
  refreshPrepUI();
  recalc();
  updateShareLink();
}
init();

------------------------------------------------------------------------------------------------------------------------------------------------------

I want to add a small text about preparation specification/warning on the last row, under the the volume outputs. Thus, we need to add another data for each drugs into our database. When it comes to 'Levophed: "Must be diluted in D5W or D5S only"' or 'Levophed: "ผสมใน D5W หรือ D5S เท่านั้น"', I think the text should be dimmed red to make the user notice, but for others white should be fine. I don't know if the Thai translation should be separeated out of the database or not. You can decide whether or not to include them.

English
Dopamine: "Diluted in NSS, D5W or D5S"
Dobutamine: "Diluted in NSS, D5W or D5S"
Adrinaline: "Diluted in NSS, D5W or D5S"
Levophed: "Must be diluted in D5W or D5S only"
NTG: "Diluted in NSS, D5W or D5S"
Primacor: "Diluted in NSS, D5W or D5S"

Thai
Dopamine: "ผสมใน NSS, D5W หรือ D5S"
Dobutamine: "ผสมใน NSS, D5W หรือ D5S"
Adrinaline: "ผสมใน NSS, D5W หรือ D5S"
Levophed: "ผสมใน D5W หรือ D5S เท่านั้น"
NTG: "ผสมใน NSS, D5W หรือ D5S"
Primacor: "ผสมใน NSS, D5W หรือ D5S"

------------------------------------------------------------------------------------------------------------------------------------------------------

Add these translations for Thai language.

"Preparation guide" -> "วิธีการเตรียมยา"
"Available Portions" -> "เลือกขนาดยา"
"Total Solution (mL)" -> "ปริมาตรเต็ม (mL)"
"Volumes" -> "ปริมาตรที่คำนวณได้"
"Drug needed (mL)" -> "ปริมาตรยาที่ใช้ (mL)"
"Solvent needed (mL)" -> "ปริมาตรสารละลายที่ใช้ (mL)"